module example_mem_2_mem(clk,
rst,
example_mem_2_write,
example_mem_2_wr_adr,
example_mem_2_din,
example_mem_2_read,
example_mem_2_rd_adr,
example_mem_2_rd_dout);

parameter NUMRPRT = 1;
parameter NUMWPRT = 1;
parameter NUMADDR = 32;
parameter BITDATA = 64;
localparam BITADDR = $clog2(NUMADDR);

input  clk;
input  rst;
input [NUMWPRT-1:0] example_mem_2_write;
input [BITADDR*NUMWPRT-1:0] example_mem_2_wr_adr;
input [BITDATA*NUMWPRT-1:0] example_mem_2_din;
input [NUMRPRT-1:0] example_mem_2_read;
input [BITADDR*NUMRPRT-1:0] example_mem_2_rd_adr;
output reg [BITDATA*NUMRPRT-1:0] example_mem_2_rd_dout;


generate if (1) begin: ff_mem

ff_mem# (.NUMWPRT(NUMWPRT),
	.NUMRPRT(NUMRPRT),
	.BITADDR(BITADDR),
	.NUMADDR(NUMADDR),
	.WIDTH(BITDATA),
	.FLOPOUT(0)) 
u_example_mem_2_ffmem (.write(example_mem_2_write),
	.wr_adr(example_mem_2_wr_adr),
	.din(example_mem_2_din),
	.read(example_mem_2_read),
	.rd_adr(example_mem_2_rd_adr),
	.rd_dout(example_mem_2_rd_dout),
	.clk(clk),
	.rst(rst));

end else begin: memogen_mem
                // TODO Stitch memogen
end
endgenerate

endmodule